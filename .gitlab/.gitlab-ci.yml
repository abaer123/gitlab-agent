# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

default:
  tags:
    - gitlab-org

variables:
  # must use image digest to invalidate cache if image is updated.
  # Image built using https://github.com/ash2k/container-definitions/compare/master...ash2k:bazel-and-clang-only
  # Bazel v3.4.1
  BUILD_IMAGE_SHA: "bb223b625e8b58a29fede6804c8e223df1de11faef57507d6bf8ba6ef2aafc32"

stages:
  - test
  - push_image
  - create_release

.bazel_build:
  image:
    name: "registry.gitlab.com/gitlab-org/cluster-integration/gitlab-agent/ci@sha256:$BUILD_IMAGE_SHA"
    entrypoint: [""]
  before_script:
    - echo "build --verbose_failures" >> .bazelrc
    - echo "build --curses=no" >> .bazelrc
    - echo "build --show_timestamps" >> .bazelrc
    - echo "build --google_default_credentials" >> .bazelrc
    - echo "build --remote_cache=https://storage.googleapis.com/gitlab-kubernetes-test-bucket/$BUILD_IMAGE_SHA" >> .bazelrc
    - echo "build --remote_download_minimal" >> .bazelrc
    - echo "test --test_output=all" >> .bazelrc
    - echo "test --test_arg=-test.v" >> .bazelrc
  #    - echo "build --sandbox_base=/dev/shm" >> .bazelrc # disabled because it's not big enough

.registry_creds: &registry_creds
  - mkdir -p "$HOME/.docker"
  - |
    credentials=$(echo -n "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" | base64)
    cat << EOF > "$HOME/.docker/config.json"
    {
      "auths": {
          "$CI_REGISTRY": {
            "auth": "$credentials"
          }
      }
    }
    EOF

test:
  stage: test
  extends: .bazel_build
  script:
    - sed -i'.bak' 's|go_register_toolchains()|go_register_toolchains(nogo = "@//:nogo_for_ci")|' WORKSPACE
    - make test-ci
    - *registry_creds
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then make release-latest-all; fi

lint:
  # Latest registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine as of 2020-07-27
  image: registry.gitlab.com/gitlab-org/gitlab-build-images@sha256:c9d9cbe6cbc68952cab8f02df566b5281e61c46cebada0ea2652935bc2ff9c7b
  stage: test
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

push_commit_image:
  stage: push_image
  extends: .bazel_build
  rules:
    # Allow creating releases manually for any branch or tag.
    - when: manual
      allow_failure: true
  script:
    - *registry_creds
    - make release-commit-all

push_tag_image:
  stage: push_image
  extends: .bazel_build
  rules:
    # Run this job when the default branch changes and a tag is created manually.
    - if: $CI_COMMIT_TAG
  script:
    - *registry_creds
    - make release-tag-all

create_release:
  stage: create_release
  rules:
    # Run this job when the default branch changes and a tag is created manually.
    - if: $CI_COMMIT_TAG
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - release-cli create --name "$CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_TAG"
# DON'T MERGE DOCS BEFORE TURNING THINGS ON https://gitlab.com/gitlab-org/gitlab/-/issues/207842
#  release:
#    name: '$CI_COMMIT_TAG'
#    tag_name: '$CI_COMMIT_TAG'
#    ref: '$CI_COMMIT_TAG'
