// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/pkg/agentrpc (interfaces: GitLabServiceClient,GitLabService_GetObjectsToSynchronizeClient,GitLabService_GetConfigurationClient,GitLabService_GetConfigurationServer,GitLabService_GetObjectsToSynchronizeServer)

// Package mock_agentrpc is a generated GoMock package.
package mock_agentrpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agentrpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/pkg/agentrpc"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGitLabServiceClient is a mock of GitLabServiceClient interface.
type MockGitLabServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabServiceClientMockRecorder
}

// MockGitLabServiceClientMockRecorder is the mock recorder for MockGitLabServiceClient.
type MockGitLabServiceClientMockRecorder struct {
	mock *MockGitLabServiceClient
}

// NewMockGitLabServiceClient creates a new mock instance.
func NewMockGitLabServiceClient(ctrl *gomock.Controller) *MockGitLabServiceClient {
	mock := &MockGitLabServiceClient{ctrl: ctrl}
	mock.recorder = &MockGitLabServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabServiceClient) EXPECT() *MockGitLabServiceClientMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method.
func (m *MockGitLabServiceClient) GetConfiguration(arg0 context.Context, arg1 *agentrpc.ConfigurationRequest, arg2 ...grpc.CallOption) (agentrpc.GitLabService_GetConfigurationClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguration", varargs...)
	ret0, _ := ret[0].(agentrpc.GitLabService_GetConfigurationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockGitLabServiceClientMockRecorder) GetConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockGitLabServiceClient)(nil).GetConfiguration), varargs...)
}

// GetObjectsToSynchronize mocks base method.
func (m *MockGitLabServiceClient) GetObjectsToSynchronize(arg0 context.Context, arg1 *agentrpc.ObjectsToSynchronizeRequest, arg2 ...grpc.CallOption) (agentrpc.GitLabService_GetObjectsToSynchronizeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectsToSynchronize", varargs...)
	ret0, _ := ret[0].(agentrpc.GitLabService_GetObjectsToSynchronizeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectsToSynchronize indicates an expected call of GetObjectsToSynchronize.
func (mr *MockGitLabServiceClientMockRecorder) GetObjectsToSynchronize(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectsToSynchronize", reflect.TypeOf((*MockGitLabServiceClient)(nil).GetObjectsToSynchronize), varargs...)
}

// MockGitLabService_GetObjectsToSynchronizeClient is a mock of GitLabService_GetObjectsToSynchronizeClient interface.
type MockGitLabService_GetObjectsToSynchronizeClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder
}

// MockGitLabService_GetObjectsToSynchronizeClientMockRecorder is the mock recorder for MockGitLabService_GetObjectsToSynchronizeClient.
type MockGitLabService_GetObjectsToSynchronizeClientMockRecorder struct {
	mock *MockGitLabService_GetObjectsToSynchronizeClient
}

// NewMockGitLabService_GetObjectsToSynchronizeClient creates a new mock instance.
func NewMockGitLabService_GetObjectsToSynchronizeClient(ctrl *gomock.Controller) *MockGitLabService_GetObjectsToSynchronizeClient {
	mock := &MockGitLabService_GetObjectsToSynchronizeClient{ctrl: ctrl}
	mock.recorder = &MockGitLabService_GetObjectsToSynchronizeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) EXPECT() *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) Recv() (*agentrpc.ObjectsToSynchronizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*agentrpc.ObjectsToSynchronizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGitLabService_GetObjectsToSynchronizeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeClient)(nil).Trailer))
}

// MockGitLabService_GetConfigurationClient is a mock of GitLabService_GetConfigurationClient interface.
type MockGitLabService_GetConfigurationClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabService_GetConfigurationClientMockRecorder
}

// MockGitLabService_GetConfigurationClientMockRecorder is the mock recorder for MockGitLabService_GetConfigurationClient.
type MockGitLabService_GetConfigurationClientMockRecorder struct {
	mock *MockGitLabService_GetConfigurationClient
}

// NewMockGitLabService_GetConfigurationClient creates a new mock instance.
func NewMockGitLabService_GetConfigurationClient(ctrl *gomock.Controller) *MockGitLabService_GetConfigurationClient {
	mock := &MockGitLabService_GetConfigurationClient{ctrl: ctrl}
	mock.recorder = &MockGitLabService_GetConfigurationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabService_GetConfigurationClient) EXPECT() *MockGitLabService_GetConfigurationClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGitLabService_GetConfigurationClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockGitLabService_GetConfigurationClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).Context))
}

// Header mocks base method.
func (m *MockGitLabService_GetConfigurationClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockGitLabService_GetConfigurationClient) Recv() (*agentrpc.ConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*agentrpc.ConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockGitLabService_GetConfigurationClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockGitLabService_GetConfigurationClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockGitLabService_GetConfigurationClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGitLabService_GetConfigurationClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGitLabService_GetConfigurationClient)(nil).Trailer))
}

// MockGitLabService_GetConfigurationServer is a mock of GitLabService_GetConfigurationServer interface.
type MockGitLabService_GetConfigurationServer struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabService_GetConfigurationServerMockRecorder
}

// MockGitLabService_GetConfigurationServerMockRecorder is the mock recorder for MockGitLabService_GetConfigurationServer.
type MockGitLabService_GetConfigurationServerMockRecorder struct {
	mock *MockGitLabService_GetConfigurationServer
}

// NewMockGitLabService_GetConfigurationServer creates a new mock instance.
func NewMockGitLabService_GetConfigurationServer(ctrl *gomock.Controller) *MockGitLabService_GetConfigurationServer {
	mock := &MockGitLabService_GetConfigurationServer{ctrl: ctrl}
	mock.recorder = &MockGitLabService_GetConfigurationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabService_GetConfigurationServer) EXPECT() *MockGitLabService_GetConfigurationServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockGitLabService_GetConfigurationServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockGitLabService_GetConfigurationServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockGitLabService_GetConfigurationServer) Send(arg0 *agentrpc.ConfigurationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockGitLabService_GetConfigurationServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockGitLabService_GetConfigurationServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockGitLabService_GetConfigurationServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockGitLabService_GetConfigurationServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockGitLabService_GetConfigurationServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGitLabService_GetConfigurationServer)(nil).SetTrailer), arg0)
}

// MockGitLabService_GetObjectsToSynchronizeServer is a mock of GitLabService_GetObjectsToSynchronizeServer interface.
type MockGitLabService_GetObjectsToSynchronizeServer struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder
}

// MockGitLabService_GetObjectsToSynchronizeServerMockRecorder is the mock recorder for MockGitLabService_GetObjectsToSynchronizeServer.
type MockGitLabService_GetObjectsToSynchronizeServerMockRecorder struct {
	mock *MockGitLabService_GetObjectsToSynchronizeServer
}

// NewMockGitLabService_GetObjectsToSynchronizeServer creates a new mock instance.
func NewMockGitLabService_GetObjectsToSynchronizeServer(ctrl *gomock.Controller) *MockGitLabService_GetObjectsToSynchronizeServer {
	mock := &MockGitLabService_GetObjectsToSynchronizeServer{ctrl: ctrl}
	mock.recorder = &MockGitLabService_GetObjectsToSynchronizeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) EXPECT() *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) Send(arg0 *agentrpc.ObjectsToSynchronizeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockGitLabService_GetObjectsToSynchronizeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockGitLabService_GetObjectsToSynchronizeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockGitLabService_GetObjectsToSynchronizeServer)(nil).SetTrailer), arg0)
}
