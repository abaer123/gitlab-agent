syntax = "proto3";

// If you make any changes make sure you run: make regenerate-proto

package agentcfg;

option go_package = "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/pkg/agentcfg";

// CF suffix stands for Configuration File, meaning a message is part of ConfigurationFile.

message ResourceFilterCF {
    // Use '*' to match any group.
    repeated string api_groups = 1 [json_name = "api_groups"];
    // Use '*' to match any kind.
    repeated string kinds = 2 [json_name = "kinds"];
}

// Project with Kubernetes object manifests.
message ManifestProjectCF {
    // Project id.
    // e.g. gitlab-org/cluster-integration/gitlab-agent
    string id = 1 [json_name = "id"];
    // Holds the only api groups and kinds of resources that gitops will monitor.
    // Inclusion rules are evaluated first, then exclusion rules. If there is still no match,
    // resource is monitored.
    repeated ResourceFilterCF resource_inclusions = 2 [json_name = "resource_inclusions"];
    // Holds the api groups and kinds of resources to exclude from gitops watch.
    // Inclusion rules are evaluated first, then exclusion rules. If there is still no match,
    // resource is monitored.
    repeated ResourceFilterCF resource_exclusions = 3 [json_name = "resource_exclusions"];

    // TODO support fetching a path (subdirectory) within a repository
}

message DeploymentsCF {
    repeated ManifestProjectCF manifest_projects = 1 [json_name = "manifest_projects"];
}

// ConfigurationFile represents user-facing configuration file.
message ConfigurationFile {
    DeploymentsCF deployments = 1 [json_name = "deployments"];
}

// AgentConfiguration represents configuration for agentk.
// Note that agentk configuration is not exactly the whole file as the file may contain bits that are not
// relevant for the agent. For example, some additional config for kas.
message AgentConfiguration {
    DeploymentsCF deployments = 1;
}
