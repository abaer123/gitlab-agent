// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/kas (interfaces: GitalyPool)

// Package mock_gitalypool is a generated GoMock package.
package mock_gitalypool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/api"
	gitalypb "gitlab.com/gitlab-org/gitaly/proto/go/gitalypb"
)

// MockGitalyPool is a mock of GitalyPool interface
type MockGitalyPool struct {
	ctrl     *gomock.Controller
	recorder *MockGitalyPoolMockRecorder
}

// MockGitalyPoolMockRecorder is the mock recorder for MockGitalyPool
type MockGitalyPoolMockRecorder struct {
	mock *MockGitalyPool
}

// NewMockGitalyPool creates a new mock instance
func NewMockGitalyPool(ctrl *gomock.Controller) *MockGitalyPool {
	mock := &MockGitalyPool{ctrl: ctrl}
	mock.recorder = &MockGitalyPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitalyPool) EXPECT() *MockGitalyPoolMockRecorder {
	return m.recorder
}

// CommitServiceClient mocks base method
func (m *MockGitalyPool) CommitServiceClient(arg0 context.Context, arg1 *api.GitalyInfo) (gitalypb.CommitServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitServiceClient", arg0, arg1)
	ret0, _ := ret[0].(gitalypb.CommitServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitServiceClient indicates an expected call of CommitServiceClient
func (mr *MockGitalyPoolMockRecorder) CommitServiceClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitServiceClient", reflect.TypeOf((*MockGitalyPool)(nil).CommitServiceClient), arg0, arg1)
}
