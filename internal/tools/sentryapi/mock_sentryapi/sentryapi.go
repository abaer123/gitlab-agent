// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/tools/sentryapi (interfaces: Hub)

// Package mock_sentryapi is a generated GoMock package.
package mock_sentryapi

import (
	context "context"
	reflect "reflect"
	time "time"

	sentry "github.com/getsentry/sentry-go"
	gomock "github.com/golang/mock/gomock"
	sentryapi "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/tools/sentryapi"
)

// MockHub is a mock of Hub interface
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
}

// MockHubMockRecorder is the mock recorder for MockHub
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// AddBreadcrumb mocks base method
func (m *MockHub) AddBreadcrumb(arg0 *sentry.Breadcrumb, arg1 *sentry.BreadcrumbHint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBreadcrumb", arg0, arg1)
}

// AddBreadcrumb indicates an expected call of AddBreadcrumb
func (mr *MockHubMockRecorder) AddBreadcrumb(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBreadcrumb", reflect.TypeOf((*MockHub)(nil).AddBreadcrumb), arg0, arg1)
}

// CaptureEvent mocks base method
func (m *MockHub) CaptureEvent(arg0 *sentry.Event) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureEvent", arg0)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// CaptureEvent indicates an expected call of CaptureEvent
func (mr *MockHubMockRecorder) CaptureEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureEvent", reflect.TypeOf((*MockHub)(nil).CaptureEvent), arg0)
}

// CaptureException mocks base method
func (m *MockHub) CaptureException(arg0 error) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureException", arg0)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// CaptureException indicates an expected call of CaptureException
func (mr *MockHubMockRecorder) CaptureException(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureException", reflect.TypeOf((*MockHub)(nil).CaptureException), arg0)
}

// CaptureMessage mocks base method
func (m *MockHub) CaptureMessage(arg0 string) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureMessage", arg0)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// CaptureMessage indicates an expected call of CaptureMessage
func (mr *MockHubMockRecorder) CaptureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureMessage", reflect.TypeOf((*MockHub)(nil).CaptureMessage), arg0)
}

// Clone mocks base method
func (m *MockHub) Clone() sentryapi.Hub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(sentryapi.Hub)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockHubMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockHub)(nil).Clone))
}

// ConfigureScope mocks base method
func (m *MockHub) ConfigureScope(arg0 func(*sentry.Scope)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureScope", arg0)
}

// ConfigureScope indicates an expected call of ConfigureScope
func (mr *MockHubMockRecorder) ConfigureScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureScope", reflect.TypeOf((*MockHub)(nil).ConfigureScope), arg0)
}

// Flush mocks base method
func (m *MockHub) Flush(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockHubMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockHub)(nil).Flush), arg0)
}

// LastEventID mocks base method
func (m *MockHub) LastEventID() sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastEventID")
	ret0, _ := ret[0].(sentry.EventID)
	return ret0
}

// LastEventID indicates an expected call of LastEventID
func (mr *MockHubMockRecorder) LastEventID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastEventID", reflect.TypeOf((*MockHub)(nil).LastEventID))
}

// PopScope mocks base method
func (m *MockHub) PopScope() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PopScope")
}

// PopScope indicates an expected call of PopScope
func (mr *MockHubMockRecorder) PopScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopScope", reflect.TypeOf((*MockHub)(nil).PopScope))
}

// PushScope mocks base method
func (m *MockHub) PushScope() *sentry.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushScope")
	ret0, _ := ret[0].(*sentry.Scope)
	return ret0
}

// PushScope indicates an expected call of PushScope
func (mr *MockHubMockRecorder) PushScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushScope", reflect.TypeOf((*MockHub)(nil).PushScope))
}

// Recover mocks base method
func (m *MockHub) Recover(arg0 interface{}) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// Recover indicates an expected call of Recover
func (mr *MockHubMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockHub)(nil).Recover), arg0)
}

// RecoverWithContext mocks base method
func (m *MockHub) RecoverWithContext(arg0 context.Context, arg1 interface{}) *sentry.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverWithContext", arg0, arg1)
	ret0, _ := ret[0].(*sentry.EventID)
	return ret0
}

// RecoverWithContext indicates an expected call of RecoverWithContext
func (mr *MockHubMockRecorder) RecoverWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverWithContext", reflect.TypeOf((*MockHub)(nil).RecoverWithContext), arg0, arg1)
}

// Scope mocks base method
func (m *MockHub) Scope() *sentry.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(*sentry.Scope)
	return ret0
}

// Scope indicates an expected call of Scope
func (mr *MockHubMockRecorder) Scope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockHub)(nil).Scope))
}

// WithScope mocks base method
func (m *MockHub) WithScope(arg0 func(*sentry.Scope)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithScope", arg0)
}

// WithScope indicates an expected call of WithScope
func (mr *MockHubMockRecorder) WithScope(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithScope", reflect.TypeOf((*MockHub)(nil).WithScope), arg0)
}
