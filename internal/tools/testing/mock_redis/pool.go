// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/redis (interfaces: Pool)

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/gomodule/redigo/redis"
)

// MockPool is a mock of Pool interface
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// GetContext mocks base method
func (m *MockPool) GetContext(arg0 context.Context) (redis.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", arg0)
	ret0, _ := ret[0].(redis.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext
func (mr *MockPoolMockRecorder) GetContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockPool)(nil).GetContext), arg0)
}
