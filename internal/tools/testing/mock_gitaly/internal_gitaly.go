// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/gitaly (interfaces: PoolInterface)

// Package mock_gitaly is a generated GoMock package.
package mock_gitaly

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/api"
	gitalypb "gitlab.com/gitlab-org/gitaly/proto/go/gitalypb"
)

// MockPoolInterface is a mock of PoolInterface interface
type MockPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPoolInterfaceMockRecorder
}

// MockPoolInterfaceMockRecorder is the mock recorder for MockPoolInterface
type MockPoolInterfaceMockRecorder struct {
	mock *MockPoolInterface
}

// NewMockPoolInterface creates a new mock instance
func NewMockPoolInterface(ctrl *gomock.Controller) *MockPoolInterface {
	mock := &MockPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolInterface) EXPECT() *MockPoolInterfaceMockRecorder {
	return m.recorder
}

// CommitServiceClient mocks base method
func (m *MockPoolInterface) CommitServiceClient(arg0 context.Context, arg1 *api.GitalyInfo) (gitalypb.CommitServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitServiceClient", arg0, arg1)
	ret0, _ := ret[0].(gitalypb.CommitServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitServiceClient indicates an expected call of CommitServiceClient
func (mr *MockPoolInterfaceMockRecorder) CommitServiceClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitServiceClient", reflect.TypeOf((*MockPoolInterface)(nil).CommitServiceClient), arg0, arg1)
}

// SmartHTTPServiceClient mocks base method
func (m *MockPoolInterface) SmartHTTPServiceClient(arg0 context.Context, arg1 *api.GitalyInfo) (gitalypb.SmartHTTPServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmartHTTPServiceClient", arg0, arg1)
	ret0, _ := ret[0].(gitalypb.SmartHTTPServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SmartHTTPServiceClient indicates an expected call of SmartHTTPServiceClient
func (mr *MockPoolInterfaceMockRecorder) SmartHTTPServiceClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmartHTTPServiceClient", reflect.TypeOf((*MockPoolInterface)(nil).SmartHTTPServiceClient), arg0, arg1)
}
