syntax = "proto3";

// If you make any changes make sure you run: make regenerate-proto

package agentrpc;

option go_package = "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/agentrpc";

import "pkg/agentcfg/agentcfg.proto";

message ConfigurationRequest {
    // Last processed commit id. Optional.
    // Server will only send configuration if the last commit on the branch is a different one.
    // If a connection breaks, this allows to resume the stream without sending the same data again.
    string commit_id = 1;
}

message ConfigurationResponse {
    agentcfg.AgentConfiguration configuration = 1;
    // Commit id of the configuration repository.
    // Can be used to resume connection from where it dropped.
    string commit_id = 2;
}

message ObjectsToSynchronizeRequest {
    // Project to fetch Kubernetes object manifests from.
    // e.g. gitlab-org/cluster-integration/gitlab-agent
    string project_id = 1;
    // Last processed commit id. Optional.
    // Server will only send objects if the last commit on the branch is a different one.
    // If a connection breaks, this allows to resume the stream without sending the same data again.
    string commit_id = 2;
    // A list of paths inside of the project to scan for .yaml/.yml/.json manifest files.
    repeated agentcfg.PathCF paths = 3;
}

message ObjectsToSynchronizeResponse {
    // First message of the stream.
    message Meta {
        // Commit id of the manifest repository.
        // Can be used to resume connection from where it dropped.
        string commit_id = 1;
    }
    // Subsequent messages of the stream.
    message Object {
        // Source of the YAML e.g. file name.
        // Several subsequent messages may contain the same source string. That means data should be accumulated
        // to form the whole blob of data.
        string source = 1;

        // YAML object manifest.
        // Might be partial data, see comment for source.
        bytes data = 2;
    }
    oneof message {
        Meta meta = 1;
        Object object = 2;
    }
}

service Kas {
    // Fetch agentk configuration.
    rpc GetConfiguration (ConfigurationRequest) returns (stream ConfigurationResponse) {
    }
    // Fetch Kubernetes objects to synchronize with the cluster.
    // Server closes the stream when it's done transmitting the full batch of objects. New request should be
    // made after that to get the next batch.
    rpc GetObjectsToSynchronize (ObjectsToSynchronizeRequest) returns (stream ObjectsToSynchronizeResponse) {
    }
}
