// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/agentrpc (interfaces: KasClient,Kas_GetObjectsToSynchronizeClient,Kas_GetConfigurationClient,Kas_GetConfigurationServer,Kas_GetObjectsToSynchronizeServer,ConfigurationWatcherInterface,ObjectsToSynchronizeWatcherInterface)

// Package mock_agentrpc is a generated GoMock package.
package mock_agentrpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agentrpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/agentrpc"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockKasClient is a mock of KasClient interface
type MockKasClient struct {
	ctrl     *gomock.Controller
	recorder *MockKasClientMockRecorder
}

// MockKasClientMockRecorder is the mock recorder for MockKasClient
type MockKasClientMockRecorder struct {
	mock *MockKasClient
}

// NewMockKasClient creates a new mock instance
func NewMockKasClient(ctrl *gomock.Controller) *MockKasClient {
	mock := &MockKasClient{ctrl: ctrl}
	mock.recorder = &MockKasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKasClient) EXPECT() *MockKasClientMockRecorder {
	return m.recorder
}

// GetConfiguration mocks base method
func (m *MockKasClient) GetConfiguration(arg0 context.Context, arg1 *agentrpc.ConfigurationRequest, arg2 ...grpc.CallOption) (agentrpc.Kas_GetConfigurationClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfiguration", varargs...)
	ret0, _ := ret[0].(agentrpc.Kas_GetConfigurationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration
func (mr *MockKasClientMockRecorder) GetConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockKasClient)(nil).GetConfiguration), varargs...)
}

// GetObjectsToSynchronize mocks base method
func (m *MockKasClient) GetObjectsToSynchronize(arg0 context.Context, arg1 *agentrpc.ObjectsToSynchronizeRequest, arg2 ...grpc.CallOption) (agentrpc.Kas_GetObjectsToSynchronizeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectsToSynchronize", varargs...)
	ret0, _ := ret[0].(agentrpc.Kas_GetObjectsToSynchronizeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectsToSynchronize indicates an expected call of GetObjectsToSynchronize
func (mr *MockKasClientMockRecorder) GetObjectsToSynchronize(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectsToSynchronize", reflect.TypeOf((*MockKasClient)(nil).GetObjectsToSynchronize), varargs...)
}

// MockKas_GetObjectsToSynchronizeClient is a mock of Kas_GetObjectsToSynchronizeClient interface
type MockKas_GetObjectsToSynchronizeClient struct {
	ctrl     *gomock.Controller
	recorder *MockKas_GetObjectsToSynchronizeClientMockRecorder
}

// MockKas_GetObjectsToSynchronizeClientMockRecorder is the mock recorder for MockKas_GetObjectsToSynchronizeClient
type MockKas_GetObjectsToSynchronizeClientMockRecorder struct {
	mock *MockKas_GetObjectsToSynchronizeClient
}

// NewMockKas_GetObjectsToSynchronizeClient creates a new mock instance
func NewMockKas_GetObjectsToSynchronizeClient(ctrl *gomock.Controller) *MockKas_GetObjectsToSynchronizeClient {
	mock := &MockKas_GetObjectsToSynchronizeClient{ctrl: ctrl}
	mock.recorder = &MockKas_GetObjectsToSynchronizeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKas_GetObjectsToSynchronizeClient) EXPECT() *MockKas_GetObjectsToSynchronizeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).Context))
}

// Header mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).Header))
}

// Recv mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) Recv() (*agentrpc.ObjectsToSynchronizeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*agentrpc.ObjectsToSynchronizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockKas_GetObjectsToSynchronizeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockKas_GetObjectsToSynchronizeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeClient)(nil).Trailer))
}

// MockKas_GetConfigurationClient is a mock of Kas_GetConfigurationClient interface
type MockKas_GetConfigurationClient struct {
	ctrl     *gomock.Controller
	recorder *MockKas_GetConfigurationClientMockRecorder
}

// MockKas_GetConfigurationClientMockRecorder is the mock recorder for MockKas_GetConfigurationClient
type MockKas_GetConfigurationClientMockRecorder struct {
	mock *MockKas_GetConfigurationClient
}

// NewMockKas_GetConfigurationClient creates a new mock instance
func NewMockKas_GetConfigurationClient(ctrl *gomock.Controller) *MockKas_GetConfigurationClient {
	mock := &MockKas_GetConfigurationClient{ctrl: ctrl}
	mock.recorder = &MockKas_GetConfigurationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKas_GetConfigurationClient) EXPECT() *MockKas_GetConfigurationClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockKas_GetConfigurationClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockKas_GetConfigurationClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockKas_GetConfigurationClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockKas_GetConfigurationClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).Context))
}

// Header mocks base method
func (m *MockKas_GetConfigurationClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockKas_GetConfigurationClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).Header))
}

// Recv mocks base method
func (m *MockKas_GetConfigurationClient) Recv() (*agentrpc.ConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*agentrpc.ConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockKas_GetConfigurationClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockKas_GetConfigurationClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockKas_GetConfigurationClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockKas_GetConfigurationClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockKas_GetConfigurationClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockKas_GetConfigurationClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockKas_GetConfigurationClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockKas_GetConfigurationClient)(nil).Trailer))
}

// MockKas_GetConfigurationServer is a mock of Kas_GetConfigurationServer interface
type MockKas_GetConfigurationServer struct {
	ctrl     *gomock.Controller
	recorder *MockKas_GetConfigurationServerMockRecorder
}

// MockKas_GetConfigurationServerMockRecorder is the mock recorder for MockKas_GetConfigurationServer
type MockKas_GetConfigurationServerMockRecorder struct {
	mock *MockKas_GetConfigurationServer
}

// NewMockKas_GetConfigurationServer creates a new mock instance
func NewMockKas_GetConfigurationServer(ctrl *gomock.Controller) *MockKas_GetConfigurationServer {
	mock := &MockKas_GetConfigurationServer{ctrl: ctrl}
	mock.recorder = &MockKas_GetConfigurationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKas_GetConfigurationServer) EXPECT() *MockKas_GetConfigurationServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockKas_GetConfigurationServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockKas_GetConfigurationServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockKas_GetConfigurationServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockKas_GetConfigurationServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockKas_GetConfigurationServer) Send(arg0 *agentrpc.ConfigurationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockKas_GetConfigurationServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockKas_GetConfigurationServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockKas_GetConfigurationServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockKas_GetConfigurationServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockKas_GetConfigurationServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockKas_GetConfigurationServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockKas_GetConfigurationServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockKas_GetConfigurationServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockKas_GetConfigurationServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockKas_GetConfigurationServer)(nil).SetTrailer), arg0)
}

// MockKas_GetObjectsToSynchronizeServer is a mock of Kas_GetObjectsToSynchronizeServer interface
type MockKas_GetObjectsToSynchronizeServer struct {
	ctrl     *gomock.Controller
	recorder *MockKas_GetObjectsToSynchronizeServerMockRecorder
}

// MockKas_GetObjectsToSynchronizeServerMockRecorder is the mock recorder for MockKas_GetObjectsToSynchronizeServer
type MockKas_GetObjectsToSynchronizeServerMockRecorder struct {
	mock *MockKas_GetObjectsToSynchronizeServer
}

// NewMockKas_GetObjectsToSynchronizeServer creates a new mock instance
func NewMockKas_GetObjectsToSynchronizeServer(ctrl *gomock.Controller) *MockKas_GetObjectsToSynchronizeServer {
	mock := &MockKas_GetObjectsToSynchronizeServer{ctrl: ctrl}
	mock.recorder = &MockKas_GetObjectsToSynchronizeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKas_GetObjectsToSynchronizeServer) EXPECT() *MockKas_GetObjectsToSynchronizeServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) Send(arg0 *agentrpc.ObjectsToSynchronizeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockKas_GetObjectsToSynchronizeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockKas_GetObjectsToSynchronizeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockKas_GetObjectsToSynchronizeServer)(nil).SetTrailer), arg0)
}

// MockConfigurationWatcherInterface is a mock of ConfigurationWatcherInterface interface
type MockConfigurationWatcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationWatcherInterfaceMockRecorder
}

// MockConfigurationWatcherInterfaceMockRecorder is the mock recorder for MockConfigurationWatcherInterface
type MockConfigurationWatcherInterfaceMockRecorder struct {
	mock *MockConfigurationWatcherInterface
}

// NewMockConfigurationWatcherInterface creates a new mock instance
func NewMockConfigurationWatcherInterface(ctrl *gomock.Controller) *MockConfigurationWatcherInterface {
	mock := &MockConfigurationWatcherInterface{ctrl: ctrl}
	mock.recorder = &MockConfigurationWatcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigurationWatcherInterface) EXPECT() *MockConfigurationWatcherInterfaceMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockConfigurationWatcherInterface) Watch(arg0 context.Context, arg1 agentrpc.ConfigurationCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Watch", arg0, arg1)
}

// Watch indicates an expected call of Watch
func (mr *MockConfigurationWatcherInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockConfigurationWatcherInterface)(nil).Watch), arg0, arg1)
}

// MockObjectsToSynchronizeWatcherInterface is a mock of ObjectsToSynchronizeWatcherInterface interface
type MockObjectsToSynchronizeWatcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockObjectsToSynchronizeWatcherInterfaceMockRecorder
}

// MockObjectsToSynchronizeWatcherInterfaceMockRecorder is the mock recorder for MockObjectsToSynchronizeWatcherInterface
type MockObjectsToSynchronizeWatcherInterfaceMockRecorder struct {
	mock *MockObjectsToSynchronizeWatcherInterface
}

// NewMockObjectsToSynchronizeWatcherInterface creates a new mock instance
func NewMockObjectsToSynchronizeWatcherInterface(ctrl *gomock.Controller) *MockObjectsToSynchronizeWatcherInterface {
	mock := &MockObjectsToSynchronizeWatcherInterface{ctrl: ctrl}
	mock.recorder = &MockObjectsToSynchronizeWatcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectsToSynchronizeWatcherInterface) EXPECT() *MockObjectsToSynchronizeWatcherInterfaceMockRecorder {
	return m.recorder
}

// Watch mocks base method
func (m *MockObjectsToSynchronizeWatcherInterface) Watch(arg0 context.Context, arg1 *agentrpc.ObjectsToSynchronizeRequest, arg2 agentrpc.ObjectsToSynchronizeCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
}

// Watch indicates an expected call of Watch
func (mr *MockObjectsToSynchronizeWatcherInterfaceMockRecorder) Watch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockObjectsToSynchronizeWatcherInterface)(nil).Watch), arg0, arg1, arg2)
}
