// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/module/reverse_tunnel/rpc (interfaces: ReverseTunnel_ConnectServer,ReverseTunnel_ConnectClient,ReverseTunnelClient)

// Package mock_reverse_tunnel_rpc is a generated GoMock package.
package mock_reverse_tunnel_rpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/module/reverse_tunnel/rpc"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockReverseTunnel_ConnectServer is a mock of ReverseTunnel_ConnectServer interface.
type MockReverseTunnel_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnel_ConnectServerMockRecorder
}

// MockReverseTunnel_ConnectServerMockRecorder is the mock recorder for MockReverseTunnel_ConnectServer.
type MockReverseTunnel_ConnectServerMockRecorder struct {
	mock *MockReverseTunnel_ConnectServer
}

// NewMockReverseTunnel_ConnectServer creates a new mock instance.
func NewMockReverseTunnel_ConnectServer(ctrl *gomock.Controller) *MockReverseTunnel_ConnectServer {
	mock := &MockReverseTunnel_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockReverseTunnel_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnel_ConnectServer) EXPECT() *MockReverseTunnel_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockReverseTunnel_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockReverseTunnel_ConnectServer) Recv() (*rpc.ConnectRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc.ConnectRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockReverseTunnel_ConnectServer) Send(arg0 *rpc.ConnectResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetTrailer), arg0)
}

// MockReverseTunnel_ConnectClient is a mock of ReverseTunnel_ConnectClient interface.
type MockReverseTunnel_ConnectClient struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnel_ConnectClientMockRecorder
}

// MockReverseTunnel_ConnectClientMockRecorder is the mock recorder for MockReverseTunnel_ConnectClient.
type MockReverseTunnel_ConnectClientMockRecorder struct {
	mock *MockReverseTunnel_ConnectClient
}

// NewMockReverseTunnel_ConnectClient creates a new mock instance.
func NewMockReverseTunnel_ConnectClient(ctrl *gomock.Controller) *MockReverseTunnel_ConnectClient {
	mock := &MockReverseTunnel_ConnectClient{ctrl: ctrl}
	mock.recorder = &MockReverseTunnel_ConnectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnel_ConnectClient) EXPECT() *MockReverseTunnel_ConnectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockReverseTunnel_ConnectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockReverseTunnel_ConnectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockReverseTunnel_ConnectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockReverseTunnel_ConnectClient) Recv() (*rpc.ConnectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc.ConnectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockReverseTunnel_ConnectClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockReverseTunnel_ConnectClient) Send(arg0 *rpc.ConnectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockReverseTunnel_ConnectClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockReverseTunnel_ConnectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockReverseTunnel_ConnectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockReverseTunnel_ConnectClient)(nil).Trailer))
}

// MockReverseTunnelClient is a mock of ReverseTunnelClient interface.
type MockReverseTunnelClient struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnelClientMockRecorder
}

// MockReverseTunnelClientMockRecorder is the mock recorder for MockReverseTunnelClient.
type MockReverseTunnelClientMockRecorder struct {
	mock *MockReverseTunnelClient
}

// NewMockReverseTunnelClient creates a new mock instance.
func NewMockReverseTunnelClient(ctrl *gomock.Controller) *MockReverseTunnelClient {
	mock := &MockReverseTunnelClient{ctrl: ctrl}
	mock.recorder = &MockReverseTunnelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnelClient) EXPECT() *MockReverseTunnelClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockReverseTunnelClient) Connect(arg0 context.Context, arg1 ...grpc.CallOption) (rpc.ReverseTunnel_ConnectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(rpc.ReverseTunnel_ConnectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockReverseTunnelClientMockRecorder) Connect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockReverseTunnelClient)(nil).Connect), varargs...)
}
