// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/module/reverse_tunnel/rpc (interfaces: ReverseTunnel_ConnectServer)

// Package mock_reverse_tunnel is a generated GoMock package.
package mock_reverse_tunnel

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/module/reverse_tunnel/rpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockReverseTunnel_ConnectServer is a mock of ReverseTunnel_ConnectServer interface.
type MockReverseTunnel_ConnectServer struct {
	ctrl     *gomock.Controller
	recorder *MockReverseTunnel_ConnectServerMockRecorder
}

// MockReverseTunnel_ConnectServerMockRecorder is the mock recorder for MockReverseTunnel_ConnectServer.
type MockReverseTunnel_ConnectServerMockRecorder struct {
	mock *MockReverseTunnel_ConnectServer
}

// NewMockReverseTunnel_ConnectServer creates a new mock instance.
func NewMockReverseTunnel_ConnectServer(ctrl *gomock.Controller) *MockReverseTunnel_ConnectServer {
	mock := &MockReverseTunnel_ConnectServer{ctrl: ctrl}
	mock.recorder = &MockReverseTunnel_ConnectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseTunnel_ConnectServer) EXPECT() *MockReverseTunnel_ConnectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockReverseTunnel_ConnectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockReverseTunnel_ConnectServer) Recv() (*rpc.ConnectRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc.ConnectRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockReverseTunnel_ConnectServer) Send(arg0 *rpc.ConnectResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockReverseTunnel_ConnectServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockReverseTunnel_ConnectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockReverseTunnel_ConnectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockReverseTunnel_ConnectServer)(nil).SetTrailer), arg0)
}
