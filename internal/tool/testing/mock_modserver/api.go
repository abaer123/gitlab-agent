// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/module/modserver (interfaces: API)

// Package mock_modserver is a generated GoMock package.
package mock_modserver

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/api"
	retry "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/tool/retry"
	errortracking "gitlab.com/gitlab-org/labkit/errortracking"
	zap "go.uber.org/zap"
	grpc "google.golang.org/grpc"
	wait "k8s.io/apimachinery/pkg/util/wait"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockAPI) Capture(arg0 error, arg1 ...errortracking.CaptureOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Capture", varargs...)
}

// Capture indicates an expected call of Capture.
func (mr *MockAPIMockRecorder) Capture(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockAPI)(nil).Capture), varargs...)
}

// GetAgentInfo mocks base method.
func (m *MockAPI) GetAgentInfo(arg0 context.Context, arg1 *zap.Logger, arg2 api.AgentToken) (*api.AgentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.AgentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInfo indicates an expected call of GetAgentInfo.
func (mr *MockAPIMockRecorder) GetAgentInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockAPI)(nil).GetAgentInfo), arg0, arg1, arg2)
}

// HandleProcessingError mocks base method.
func (m *MockAPI) HandleProcessingError(arg0 context.Context, arg1 *zap.Logger, arg2 string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleProcessingError", arg0, arg1, arg2, arg3)
}

// HandleProcessingError indicates an expected call of HandleProcessingError.
func (mr *MockAPIMockRecorder) HandleProcessingError(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProcessingError", reflect.TypeOf((*MockAPI)(nil).HandleProcessingError), arg0, arg1, arg2, arg3)
}

// HandleSendError mocks base method.
func (m *MockAPI) HandleSendError(arg0 *zap.Logger, arg1 string, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSendError", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSendError indicates an expected call of HandleSendError.
func (mr *MockAPIMockRecorder) HandleSendError(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSendError", reflect.TypeOf((*MockAPI)(nil).HandleSendError), arg0, arg1, arg2)
}

// PollWithBackoff mocks base method.
func (m *MockAPI) PollWithBackoff(arg0 grpc.ServerStream, arg1 wait.BackoffManager, arg2 bool, arg3 time.Duration, arg4 retry.PollWithBackoffFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollWithBackoff", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PollWithBackoff indicates an expected call of PollWithBackoff.
func (mr *MockAPIMockRecorder) PollWithBackoff(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollWithBackoff", reflect.TypeOf((*MockAPI)(nil).PollWithBackoff), arg0, arg1, arg2, arg3, arg4)
}
