// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/tool/redistool (interfaces: ExpiringHashInterface)

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redistool "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/tool/redistool"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// MockExpiringHashInterface is a mock of ExpiringHashInterface interface.
type MockExpiringHashInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpiringHashInterfaceMockRecorder
}

// MockExpiringHashInterfaceMockRecorder is the mock recorder for MockExpiringHashInterface.
type MockExpiringHashInterfaceMockRecorder struct {
	mock *MockExpiringHashInterface
}

// NewMockExpiringHashInterface creates a new mock instance.
func NewMockExpiringHashInterface(ctrl *gomock.Controller) *MockExpiringHashInterface {
	mock := &MockExpiringHashInterface{ctrl: ctrl}
	mock.recorder = &MockExpiringHashInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiringHashInterface) EXPECT() *MockExpiringHashInterfaceMockRecorder {
	return m.recorder
}

// GC mocks base method.
func (m *MockExpiringHashInterface) GC(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GC indicates an expected call of GC.
func (mr *MockExpiringHashInterfaceMockRecorder) GC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockExpiringHashInterface)(nil).GC), arg0)
}

// Refresh mocks base method.
func (m *MockExpiringHashInterface) Refresh(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockExpiringHashInterfaceMockRecorder) Refresh(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockExpiringHashInterface)(nil).Refresh), arg0)
}

// Scan mocks base method.
func (m *MockExpiringHashInterface) Scan(arg0 context.Context, arg1 interface{}, arg2 redistool.ScanCallback) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockExpiringHashInterfaceMockRecorder) Scan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockExpiringHashInterface)(nil).Scan), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockExpiringHashInterface) Set(arg0 context.Context, arg1 interface{}, arg2 int64, arg3 *anypb.Any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockExpiringHashInterfaceMockRecorder) Set(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockExpiringHashInterface)(nil).Set), arg0, arg1, arg2, arg3)
}

// Unset mocks base method.
func (m *MockExpiringHashInterface) Unset(arg0 context.Context, arg1 interface{}, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockExpiringHashInterfaceMockRecorder) Unset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockExpiringHashInterface)(nil).Unset), arg0, arg1, arg2)
}
