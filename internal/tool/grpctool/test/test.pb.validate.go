// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/tool/grpctool/test/test.proto

package test

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetS1()) < 1 {
		return RequestValidationError{
			field:  "S1",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message.(type) {

	case *Response_Scalar:
		// no validation rules for Scalar

	case *Response_X1:
		// no validation rules for X1

	case *Response_Data_:

		if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Response_Last_:

		if v, ok := interface{}(m.GetLast()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  "Last",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ResponseValidationError{
			field:  "Message",
			reason: "value is required",
		}

	}

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on NoOneofs with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NoOneofs) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoOneofsValidationError is the validation error returned by
// NoOneofs.Validate if the designated constraints aren't met.
type NoOneofsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoOneofsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoOneofsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoOneofsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoOneofsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoOneofsValidationError) ErrorName() string { return "NoOneofsValidationError" }

// Error satisfies the builtin error interface
func (e NoOneofsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoOneofs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoOneofsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoOneofsValidationError{}

// Validate checks the field values on TwoOneofs with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TwoOneofs) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message1.(type) {

	case *TwoOneofs_M11:
		// no validation rules for M11

	case *TwoOneofs_M12:
		// no validation rules for M12

	}

	switch m.Message2.(type) {

	case *TwoOneofs_M21:
		// no validation rules for M21

	case *TwoOneofs_M22:
		// no validation rules for M22

	}

	return nil
}

// TwoOneofsValidationError is the validation error returned by
// TwoOneofs.Validate if the designated constraints aren't met.
type TwoOneofsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwoOneofsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwoOneofsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwoOneofsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwoOneofsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwoOneofsValidationError) ErrorName() string { return "TwoOneofsValidationError" }

// Error satisfies the builtin error interface
func (e TwoOneofsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwoOneofs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwoOneofsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwoOneofsValidationError{}

// Validate checks the field values on TwoValidOneofs with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TwoValidOneofs) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message1.(type) {

	case *TwoValidOneofs_M11:
		// no validation rules for M11

	case *TwoValidOneofs_M12:
		// no validation rules for M12

	}

	switch m.Message2.(type) {

	case *TwoValidOneofs_M21:
		// no validation rules for M21

	case *TwoValidOneofs_M22:
		// no validation rules for M22

	}

	return nil
}

// TwoValidOneofsValidationError is the validation error returned by
// TwoValidOneofs.Validate if the designated constraints aren't met.
type TwoValidOneofsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TwoValidOneofsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TwoValidOneofsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TwoValidOneofsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TwoValidOneofsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TwoValidOneofsValidationError) ErrorName() string { return "TwoValidOneofsValidationError" }

// Error satisfies the builtin error interface
func (e TwoValidOneofsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTwoValidOneofs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TwoValidOneofsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TwoValidOneofsValidationError{}

// Validate checks the field values on OutOfOneof with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OutOfOneof) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	switch m.Message.(type) {

	case *OutOfOneof_M1:
		// no validation rules for M1

	case *OutOfOneof_M2:
		// no validation rules for M2

	}

	return nil
}

// OutOfOneofValidationError is the validation error returned by
// OutOfOneof.Validate if the designated constraints aren't met.
type OutOfOneofValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutOfOneofValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutOfOneofValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutOfOneofValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutOfOneofValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutOfOneofValidationError) ErrorName() string { return "OutOfOneofValidationError" }

// Error satisfies the builtin error interface
func (e OutOfOneofValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutOfOneof.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutOfOneofValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutOfOneofValidationError{}

// Validate checks the field values on NotAllReachable with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NotAllReachable) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message.(type) {

	case *NotAllReachable_M1:
		// no validation rules for M1

	case *NotAllReachable_M2:
		// no validation rules for M2

	case *NotAllReachable_M3:
		// no validation rules for M3

	}

	return nil
}

// NotAllReachableValidationError is the validation error returned by
// NotAllReachable.Validate if the designated constraints aren't met.
type NotAllReachableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotAllReachableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotAllReachableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotAllReachableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotAllReachableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotAllReachableValidationError) ErrorName() string { return "NotAllReachableValidationError" }

// Error satisfies the builtin error interface
func (e NotAllReachableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotAllReachable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotAllReachableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotAllReachableValidationError{}

// Validate checks the field values on Response_Data with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Response_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// Response_DataValidationError is the validation error returned by
// Response_Data.Validate if the designated constraints aren't met.
type Response_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_DataValidationError) ErrorName() string { return "Response_DataValidationError" }

// Error satisfies the builtin error interface
func (e Response_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_DataValidationError{}

// Validate checks the field values on Response_Last with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Response_Last) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Response_LastValidationError is the validation error returned by
// Response_Last.Validate if the designated constraints aren't met.
type Response_LastValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_LastValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_LastValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_LastValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_LastValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_LastValidationError) ErrorName() string { return "Response_LastValidationError" }

// Error satisfies the builtin error interface
func (e Response_LastValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Last.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_LastValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_LastValidationError{}
