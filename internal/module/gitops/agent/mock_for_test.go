// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/module/gitops/agent (interfaces: GitopsEngineFactory,GitopsWorkerFactory,GitopsWorker)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	cache "github.com/argoproj/gitops-engine/pkg/cache"
	engine "github.com/argoproj/gitops-engine/pkg/engine"
	gomock "github.com/golang/mock/gomock"
	agentcfg "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/pkg/agentcfg"
)

// MockGitopsEngineFactory is a mock of GitopsEngineFactory interface.
type MockGitopsEngineFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGitopsEngineFactoryMockRecorder
}

// MockGitopsEngineFactoryMockRecorder is the mock recorder for MockGitopsEngineFactory.
type MockGitopsEngineFactoryMockRecorder struct {
	mock *MockGitopsEngineFactory
}

// NewMockGitopsEngineFactory creates a new mock instance.
func NewMockGitopsEngineFactory(ctrl *gomock.Controller) *MockGitopsEngineFactory {
	mock := &MockGitopsEngineFactory{ctrl: ctrl}
	mock.recorder = &MockGitopsEngineFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitopsEngineFactory) EXPECT() *MockGitopsEngineFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockGitopsEngineFactory) New(arg0 []engine.Option, arg1 []cache.UpdateSettingsFunc) engine.GitOpsEngine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(engine.GitOpsEngine)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockGitopsEngineFactoryMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockGitopsEngineFactory)(nil).New), arg0, arg1)
}

// MockGitopsWorkerFactory is a mock of GitopsWorkerFactory interface.
type MockGitopsWorkerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGitopsWorkerFactoryMockRecorder
}

// MockGitopsWorkerFactoryMockRecorder is the mock recorder for MockGitopsWorkerFactory.
type MockGitopsWorkerFactoryMockRecorder struct {
	mock *MockGitopsWorkerFactory
}

// NewMockGitopsWorkerFactory creates a new mock instance.
func NewMockGitopsWorkerFactory(ctrl *gomock.Controller) *MockGitopsWorkerFactory {
	mock := &MockGitopsWorkerFactory{ctrl: ctrl}
	mock.recorder = &MockGitopsWorkerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitopsWorkerFactory) EXPECT() *MockGitopsWorkerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockGitopsWorkerFactory) New(arg0 *agentcfg.ManifestProjectCF) GitopsWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(GitopsWorker)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockGitopsWorkerFactoryMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockGitopsWorkerFactory)(nil).New), arg0)
}

// MockGitopsWorker is a mock of GitopsWorker interface.
type MockGitopsWorker struct {
	ctrl     *gomock.Controller
	recorder *MockGitopsWorkerMockRecorder
}

// MockGitopsWorkerMockRecorder is the mock recorder for MockGitopsWorker.
type MockGitopsWorkerMockRecorder struct {
	mock *MockGitopsWorker
}

// NewMockGitopsWorker creates a new mock instance.
func NewMockGitopsWorker(ctrl *gomock.Controller) *MockGitopsWorker {
	mock := &MockGitopsWorker{ctrl: ctrl}
	mock.recorder = &MockGitopsWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitopsWorker) EXPECT() *MockGitopsWorkerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockGitopsWorker) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockGitopsWorkerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGitopsWorker)(nil).Run), arg0)
}
