package agent

import (
	"context"
	"sync"

	"github.com/argoproj/gitops-engine/pkg/cache"
	"github.com/argoproj/gitops-engine/pkg/engine"
	enginesync "github.com/argoproj/gitops-engine/pkg/sync"
	"github.com/argoproj/gitops-engine/pkg/sync/common"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

var (
	_ engine.GitOpsEngine = &threadSafeGitopsEngine{}
	_ GitopsEngineFactory = &threadSafeGitopsEngineFactory{}
)

// threadSafeGitopsEngineFactory is a wrapper for GitopsEngineFactory to make it thread safe.
// For use with tests - mocks, generated by GoMock, are not thread safe.
type threadSafeGitopsEngineFactory struct {
	mutex         sync.Mutex
	EngineFactory GitopsEngineFactory
}

func (f *threadSafeGitopsEngineFactory) New(engineOpts []engine.Option, cacheOpts []cache.UpdateSettingsFunc) engine.GitOpsEngine {
	f.mutex.Lock()
	defer f.mutex.Unlock()
	return &threadSafeGitopsEngine{
		mutex:    &f.mutex,
		delegate: f.EngineFactory.New(engineOpts, cacheOpts),
	}
}

type threadSafeGitopsEngine struct {
	// mutex is a pointer to allow to share a mutex between mocks.
	// This is required because all mocks share a *gomock.Controller instance which is what we are protecting.
	mutex    *sync.Mutex
	delegate engine.GitOpsEngine
}

func (e *threadSafeGitopsEngine) Run() (engine.StopFunc, error) {
	e.mutex.Lock()
	defer e.mutex.Unlock()
	return e.delegate.Run()
}

func (e *threadSafeGitopsEngine) Sync(ctx context.Context, resources []*unstructured.Unstructured, isManaged func(r *cache.Resource) bool, revision string, namespace string, opts ...enginesync.SyncOpt) ([]common.ResourceSyncResult, error) {
	e.mutex.Lock()
	defer e.mutex.Unlock()
	return e.delegate.Sync(ctx, resources, isManaged, revision, namespace, opts...)
}
