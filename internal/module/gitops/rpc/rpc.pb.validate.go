// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/module/gitops/rpc/rpc.proto

package rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _rpc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ObjectsToSynchronizeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ObjectsToSynchronizeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		return ObjectsToSynchronizeRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for CommitId

	if len(m.GetPaths()) < 1 {
		return ObjectsToSynchronizeRequestValidationError{
			field:  "Paths",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectsToSynchronizeRequestValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ObjectsToSynchronizeRequestValidationError is the validation error returned
// by ObjectsToSynchronizeRequest.Validate if the designated constraints
// aren't met.
type ObjectsToSynchronizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsToSynchronizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsToSynchronizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsToSynchronizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsToSynchronizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsToSynchronizeRequestValidationError) ErrorName() string {
	return "ObjectsToSynchronizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsToSynchronizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsToSynchronizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsToSynchronizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsToSynchronizeRequestValidationError{}

// Validate checks the field values on ObjectsToSynchronizeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ObjectsToSynchronizeResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message.(type) {

	case *ObjectsToSynchronizeResponse_Headers_:

		if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectsToSynchronizeResponseValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ObjectsToSynchronizeResponse_Object_:

		if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectsToSynchronizeResponseValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ObjectsToSynchronizeResponse_Trailers_:

		if v, ok := interface{}(m.GetTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectsToSynchronizeResponseValidationError{
					field:  "Trailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ObjectsToSynchronizeResponseValidationError{
			field:  "Message",
			reason: "value is required",
		}

	}

	return nil
}

// ObjectsToSynchronizeResponseValidationError is the validation error returned
// by ObjectsToSynchronizeResponse.Validate if the designated constraints
// aren't met.
type ObjectsToSynchronizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsToSynchronizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsToSynchronizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsToSynchronizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsToSynchronizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsToSynchronizeResponseValidationError) ErrorName() string {
	return "ObjectsToSynchronizeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsToSynchronizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsToSynchronizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsToSynchronizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsToSynchronizeResponseValidationError{}

// Validate checks the field values on ObjectsToSynchronizeResponse_Headers
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ObjectsToSynchronizeResponse_Headers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCommitId()) < 1 {
		return ObjectsToSynchronizeResponse_HeadersValidationError{
			field:  "CommitId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ObjectsToSynchronizeResponse_HeadersValidationError is the validation error
// returned by ObjectsToSynchronizeResponse_Headers.Validate if the designated
// constraints aren't met.
type ObjectsToSynchronizeResponse_HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsToSynchronizeResponse_HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsToSynchronizeResponse_HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsToSynchronizeResponse_HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsToSynchronizeResponse_HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsToSynchronizeResponse_HeadersValidationError) ErrorName() string {
	return "ObjectsToSynchronizeResponse_HeadersValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsToSynchronizeResponse_HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsToSynchronizeResponse_Headers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsToSynchronizeResponse_HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsToSynchronizeResponse_HeadersValidationError{}

// Validate checks the field values on ObjectsToSynchronizeResponse_Object with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ObjectsToSynchronizeResponse_Object) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSource()) < 1 {
		return ObjectsToSynchronizeResponse_ObjectValidationError{
			field:  "Source",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Data

	return nil
}

// ObjectsToSynchronizeResponse_ObjectValidationError is the validation error
// returned by ObjectsToSynchronizeResponse_Object.Validate if the designated
// constraints aren't met.
type ObjectsToSynchronizeResponse_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsToSynchronizeResponse_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsToSynchronizeResponse_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsToSynchronizeResponse_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsToSynchronizeResponse_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsToSynchronizeResponse_ObjectValidationError) ErrorName() string {
	return "ObjectsToSynchronizeResponse_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsToSynchronizeResponse_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsToSynchronizeResponse_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsToSynchronizeResponse_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsToSynchronizeResponse_ObjectValidationError{}

// Validate checks the field values on ObjectsToSynchronizeResponse_Trailers
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ObjectsToSynchronizeResponse_Trailers) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ObjectsToSynchronizeResponse_TrailersValidationError is the validation error
// returned by ObjectsToSynchronizeResponse_Trailers.Validate if the
// designated constraints aren't met.
type ObjectsToSynchronizeResponse_TrailersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectsToSynchronizeResponse_TrailersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectsToSynchronizeResponse_TrailersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectsToSynchronizeResponse_TrailersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectsToSynchronizeResponse_TrailersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectsToSynchronizeResponse_TrailersValidationError) ErrorName() string {
	return "ObjectsToSynchronizeResponse_TrailersValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectsToSynchronizeResponse_TrailersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectsToSynchronizeResponse_Trailers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectsToSynchronizeResponse_TrailersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectsToSynchronizeResponse_TrailersValidationError{}
