// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/module/gitlab_access/rpc/rpc.proto

package rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _rpc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Values with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Values) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ValuesValidationError is the validation error returned by Values.Validate if
// the designated constraints aren't met.
type ValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValuesValidationError) ErrorName() string { return "ValuesValidationError" }

// Error satisfies the builtin error interface
func (e ValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValuesValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message.(type) {

	case *Request_Headers_:

		if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_Data_:

		if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Request_Trailers_:

		if v, ok := interface{}(m.GetTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestValidationError{
					field:  "Trailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return RequestValidationError{
			field:  "Message",
			reason: "value is required",
		}

	}

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Message.(type) {

	case *Response_Headers_:

		if v, ok := interface{}(m.GetHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Response_Data_:

		if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Response_Trailers_:

		if v, ok := interface{}(m.GetTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponseValidationError{
					field:  "Trailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ResponseValidationError{
			field:  "Message",
			reason: "value is required",
		}

	}

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on Request_Headers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Request_Headers) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetModuleName()) < 1 {
		return Request_HeadersValidationError{
			field:  "ModuleName",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		return Request_HeadersValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
	}

	for key, val := range m.GetHeaders() {
		_ = val

		// no validation rules for Headers[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_HeadersValidationError{
					field:  fmt.Sprintf("Headers[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetUrlPath()) < 1 {
		return Request_HeadersValidationError{
			field:  "UrlPath",
			reason: "value length must be at least 1 runes",
		}
	}

	for key, val := range m.GetQuery() {
		_ = val

		// no validation rules for Query[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Request_HeadersValidationError{
					field:  fmt.Sprintf("Query[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Request_HeadersValidationError is the validation error returned by
// Request_Headers.Validate if the designated constraints aren't met.
type Request_HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_HeadersValidationError) ErrorName() string { return "Request_HeadersValidationError" }

// Error satisfies the builtin error interface
func (e Request_HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_Headers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_HeadersValidationError{}

// Validate checks the field values on Request_Data with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Request_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// Request_DataValidationError is the validation error returned by
// Request_Data.Validate if the designated constraints aren't met.
type Request_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_DataValidationError) ErrorName() string { return "Request_DataValidationError" }

// Error satisfies the builtin error interface
func (e Request_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_DataValidationError{}

// Validate checks the field values on Request_Trailers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Request_Trailers) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Request_TrailersValidationError is the validation error returned by
// Request_Trailers.Validate if the designated constraints aren't met.
type Request_TrailersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Request_TrailersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Request_TrailersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Request_TrailersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Request_TrailersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Request_TrailersValidationError) ErrorName() string { return "Request_TrailersValidationError" }

// Error satisfies the builtin error interface
func (e Request_TrailersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest_Trailers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Request_TrailersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Request_TrailersValidationError{}

// Validate checks the field values on Response_Headers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Response_Headers) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StatusCode

	// no validation rules for Status

	for key, val := range m.GetHeaders() {
		_ = val

		// no validation rules for Headers[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Response_HeadersValidationError{
					field:  fmt.Sprintf("Headers[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// Response_HeadersValidationError is the validation error returned by
// Response_Headers.Validate if the designated constraints aren't met.
type Response_HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_HeadersValidationError) ErrorName() string { return "Response_HeadersValidationError" }

// Error satisfies the builtin error interface
func (e Response_HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Headers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_HeadersValidationError{}

// Validate checks the field values on Response_Data with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Response_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// Response_DataValidationError is the validation error returned by
// Response_Data.Validate if the designated constraints aren't met.
type Response_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_DataValidationError) ErrorName() string { return "Response_DataValidationError" }

// Error satisfies the builtin error interface
func (e Response_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_DataValidationError{}

// Validate checks the field values on Response_Trailers with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Response_Trailers) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Response_TrailersValidationError is the validation error returned by
// Response_Trailers.Validate if the designated constraints aren't met.
type Response_TrailersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Response_TrailersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Response_TrailersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Response_TrailersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Response_TrailersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Response_TrailersValidationError) ErrorName() string {
	return "Response_TrailersValidationError"
}

// Error satisfies the builtin error interface
func (e Response_TrailersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse_Trailers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Response_TrailersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Response_TrailersValidationError{}
