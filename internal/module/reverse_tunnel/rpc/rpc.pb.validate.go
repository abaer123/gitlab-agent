// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/module/reverse_tunnel/rpc/rpc.proto

package rpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _rpc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Values with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Values) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ValuesValidationError is the validation error returned by Values.Validate if
// the designated constraints aren't met.
type ValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValuesValidationError) ErrorName() string { return "ValuesValidationError" }

// Error satisfies the builtin error interface
func (e ValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValuesValidationError{}

// Validate checks the field values on AgentDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AgentDescriptor) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AgentDescriptorValidationError is the validation error returned by
// AgentDescriptor.Validate if the designated constraints aren't met.
type AgentDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentDescriptorValidationError) ErrorName() string { return "AgentDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e AgentDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentDescriptorValidationError{}

// Validate checks the field values on Header with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Header) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetMeta() {
		_ = val

		// no validation rules for Meta[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeaderValidationError{
					field:  fmt.Sprintf("Meta[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HeaderValidationError is the validation error returned by Header.Validate if
// the designated constraints aren't met.
type HeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderValidationError) ErrorName() string { return "HeaderValidationError" }

// Error satisfies the builtin error interface
func (e HeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Trailer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Trailer) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetMeta() {
		_ = val

		// no validation rules for Meta[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrailerValidationError{
					field:  fmt.Sprintf("Meta[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TrailerValidationError is the validation error returned by Trailer.Validate
// if the designated constraints aren't met.
type TrailerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrailerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrailerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrailerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrailerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrailerValidationError) ErrorName() string { return "TrailerValidationError" }

// Error satisfies the builtin error interface
func (e TrailerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrailer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrailerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrailerValidationError{}

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConnectRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Msg.(type) {

	case *ConnectRequest_Descriptor_:

		if v, ok := interface{}(m.GetDescriptor_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "Descriptor_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectRequest_Header:

		if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectRequest_Message:

		if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectRequest_Trailer:

		if v, ok := interface{}(m.GetTrailer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectRequestValidationError{
					field:  "Trailer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ConnectRequestValidationError{
			field:  "Msg",
			reason: "value is required",
		}

	}

	return nil
}

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on RequestInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RequestInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MethodName

	for key, val := range m.GetMeta() {
		_ = val

		// no validation rules for Meta[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequestInfoValidationError{
					field:  fmt.Sprintf("Meta[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RequestInfoValidationError is the validation error returned by
// RequestInfo.Validate if the designated constraints aren't met.
type RequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestInfoValidationError) ErrorName() string { return "RequestInfoValidationError" }

// Error satisfies the builtin error interface
func (e RequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestInfoValidationError{}

// Validate checks the field values on CloseSend with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CloseSend) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CloseSendValidationError is the validation error returned by
// CloseSend.Validate if the designated constraints aren't met.
type CloseSendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseSendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseSendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseSendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseSendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseSendValidationError) ErrorName() string { return "CloseSendValidationError" }

// Error satisfies the builtin error interface
func (e CloseSendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseSend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseSendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseSendValidationError{}

// Validate checks the field values on ConnectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ConnectResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Msg.(type) {

	case *ConnectResponse_RequestInfo:

		if v, ok := interface{}(m.GetRequestInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "RequestInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectResponse_Message:

		if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectResponse_CloseSend:

		if v, ok := interface{}(m.GetCloseSend()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectResponseValidationError{
					field:  "CloseSend",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ConnectResponseValidationError{
			field:  "Msg",
			reason: "value is required",
		}

	}

	return nil
}

// ConnectResponseValidationError is the validation error returned by
// ConnectResponse.Validate if the designated constraints aren't met.
type ConnectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectResponseValidationError) ErrorName() string { return "ConnectResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConnectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectResponseValidationError{}
