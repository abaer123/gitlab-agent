// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/module/reverse_tunnel (interfaces: TunnelDataCallback)

// Package reverse_tunnel is a generated GoMock package.
package reverse_tunnel

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prototool "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/internal/tool/prototool"
	status "google.golang.org/genproto/googleapis/rpc/status"
)

// MockTunnelDataCallback is a mock of TunnelDataCallback interface.
type MockTunnelDataCallback struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelDataCallbackMockRecorder
}

// MockTunnelDataCallbackMockRecorder is the mock recorder for MockTunnelDataCallback.
type MockTunnelDataCallbackMockRecorder struct {
	mock *MockTunnelDataCallback
}

// NewMockTunnelDataCallback creates a new mock instance.
func NewMockTunnelDataCallback(ctrl *gomock.Controller) *MockTunnelDataCallback {
	mock := &MockTunnelDataCallback{ctrl: ctrl}
	mock.recorder = &MockTunnelDataCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelDataCallback) EXPECT() *MockTunnelDataCallbackMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTunnelDataCallback) Error(arg0 *status.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTunnelDataCallbackMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTunnelDataCallback)(nil).Error), arg0)
}

// Header mocks base method.
func (m *MockTunnelDataCallback) Header(arg0 map[string]*prototool.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockTunnelDataCallbackMockRecorder) Header(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTunnelDataCallback)(nil).Header), arg0)
}

// Message mocks base method.
func (m *MockTunnelDataCallback) Message(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockTunnelDataCallbackMockRecorder) Message(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockTunnelDataCallback)(nil).Message), arg0)
}

// Trailer mocks base method.
func (m *MockTunnelDataCallback) Trailer(arg0 map[string]*prototool.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTunnelDataCallbackMockRecorder) Trailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTunnelDataCallback)(nil).Trailer), arg0)
}
