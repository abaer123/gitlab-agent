// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentTrackerClient is the client API for AgentTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentTrackerClient interface {
	GetConnectedAgents(ctx context.Context, in *GetConnectedAgentsRequest, opts ...grpc.CallOption) (*GetConnectedAgentsResponse, error)
}

type agentTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentTrackerClient(cc grpc.ClientConnInterface) AgentTrackerClient {
	return &agentTrackerClient{cc}
}

func (c *agentTrackerClient) GetConnectedAgents(ctx context.Context, in *GetConnectedAgentsRequest, opts ...grpc.CallOption) (*GetConnectedAgentsResponse, error) {
	out := new(GetConnectedAgentsResponse)
	err := c.cc.Invoke(ctx, "/gitlab.agent.agent_tracker.rpc.AgentTracker/GetConnectedAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentTrackerServer is the server API for AgentTracker service.
// All implementations must embed UnimplementedAgentTrackerServer
// for forward compatibility
type AgentTrackerServer interface {
	GetConnectedAgents(context.Context, *GetConnectedAgentsRequest) (*GetConnectedAgentsResponse, error)
	mustEmbedUnimplementedAgentTrackerServer()
}

// UnimplementedAgentTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedAgentTrackerServer struct {
}

func (UnimplementedAgentTrackerServer) GetConnectedAgents(context.Context, *GetConnectedAgentsRequest) (*GetConnectedAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedAgents not implemented")
}
func (UnimplementedAgentTrackerServer) mustEmbedUnimplementedAgentTrackerServer() {}

// UnsafeAgentTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentTrackerServer will
// result in compilation errors.
type UnsafeAgentTrackerServer interface {
	mustEmbedUnimplementedAgentTrackerServer()
}

func RegisterAgentTrackerServer(s grpc.ServiceRegistrar, srv AgentTrackerServer) {
	s.RegisterService(&AgentTracker_ServiceDesc, srv)
}

func _AgentTracker_GetConnectedAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectedAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentTrackerServer).GetConnectedAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.agent.agent_tracker.rpc.AgentTracker/GetConnectedAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentTrackerServer).GetConnectedAgents(ctx, req.(*GetConnectedAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentTracker_ServiceDesc is the grpc.ServiceDesc for AgentTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.agent.agent_tracker.rpc.AgentTracker",
	HandlerType: (*AgentTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectedAgents",
			Handler:    _AgentTracker_GetConnectedAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/module/agent_tracker/rpc/rpc.proto",
}
