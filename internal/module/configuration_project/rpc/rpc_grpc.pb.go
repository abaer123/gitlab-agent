// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationProjectClient is the client API for ConfigurationProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationProjectClient interface {
	ListAgentConfigFiles(ctx context.Context, in *ListAgentConfigFilesRequest, opts ...grpc.CallOption) (*ListAgentConfigFilesResponse, error)
}

type configurationProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationProjectClient(cc grpc.ClientConnInterface) ConfigurationProjectClient {
	return &configurationProjectClient{cc}
}

func (c *configurationProjectClient) ListAgentConfigFiles(ctx context.Context, in *ListAgentConfigFilesRequest, opts ...grpc.CallOption) (*ListAgentConfigFilesResponse, error) {
	out := new(ListAgentConfigFilesResponse)
	err := c.cc.Invoke(ctx, "/gitlab.agent.configuration_project.rpc.ConfigurationProject/ListAgentConfigFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationProjectServer is the server API for ConfigurationProject service.
// All implementations must embed UnimplementedConfigurationProjectServer
// for forward compatibility
type ConfigurationProjectServer interface {
	ListAgentConfigFiles(context.Context, *ListAgentConfigFilesRequest) (*ListAgentConfigFilesResponse, error)
	mustEmbedUnimplementedConfigurationProjectServer()
}

// UnimplementedConfigurationProjectServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationProjectServer struct {
}

func (UnimplementedConfigurationProjectServer) ListAgentConfigFiles(context.Context, *ListAgentConfigFilesRequest) (*ListAgentConfigFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentConfigFiles not implemented")
}
func (UnimplementedConfigurationProjectServer) mustEmbedUnimplementedConfigurationProjectServer() {}

// UnsafeConfigurationProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationProjectServer will
// result in compilation errors.
type UnsafeConfigurationProjectServer interface {
	mustEmbedUnimplementedConfigurationProjectServer()
}

func RegisterConfigurationProjectServer(s grpc.ServiceRegistrar, srv ConfigurationProjectServer) {
	s.RegisterService(&ConfigurationProject_ServiceDesc, srv)
}

func _ConfigurationProject_ListAgentConfigFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentConfigFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationProjectServer).ListAgentConfigFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitlab.agent.configuration_project.rpc.ConfigurationProject/ListAgentConfigFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationProjectServer).ListAgentConfigFiles(ctx, req.(*ListAgentConfigFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigurationProject_ServiceDesc is the grpc.ServiceDesc for ConfigurationProject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationProject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.agent.configuration_project.rpc.ConfigurationProject",
	HandlerType: (*ConfigurationProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgentConfigFiles",
			Handler:    _ConfigurationProject_ListAgentConfigFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/module/configuration_project/rpc/rpc.proto",
}
