// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cilium/cilium/pkg/k8s/client/clientset/versioned/typed/cilium.io/v2 (interfaces: CiliumV2Interface,CiliumNetworkPolicyInterface)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	v20 "github.com/cilium/cilium/pkg/k8s/client/clientset/versioned/typed/cilium.io/v2"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MockCiliumV2Interface is a mock of CiliumV2Interface interface.
type MockCiliumV2Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCiliumV2InterfaceMockRecorder
}

// MockCiliumV2InterfaceMockRecorder is the mock recorder for MockCiliumV2Interface.
type MockCiliumV2InterfaceMockRecorder struct {
	mock *MockCiliumV2Interface
}

// NewMockCiliumV2Interface creates a new mock instance.
func NewMockCiliumV2Interface(ctrl *gomock.Controller) *MockCiliumV2Interface {
	mock := &MockCiliumV2Interface{ctrl: ctrl}
	mock.recorder = &MockCiliumV2InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiliumV2Interface) EXPECT() *MockCiliumV2InterfaceMockRecorder {
	return m.recorder
}

// CiliumClusterwideNetworkPolicies mocks base method.
func (m *MockCiliumV2Interface) CiliumClusterwideNetworkPolicies() v20.CiliumClusterwideNetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumClusterwideNetworkPolicies")
	ret0, _ := ret[0].(v20.CiliumClusterwideNetworkPolicyInterface)
	return ret0
}

// CiliumClusterwideNetworkPolicies indicates an expected call of CiliumClusterwideNetworkPolicies.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumClusterwideNetworkPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumClusterwideNetworkPolicies", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumClusterwideNetworkPolicies))
}

// CiliumEndpoints mocks base method.
func (m *MockCiliumV2Interface) CiliumEndpoints(arg0 string) v20.CiliumEndpointInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumEndpoints", arg0)
	ret0, _ := ret[0].(v20.CiliumEndpointInterface)
	return ret0
}

// CiliumEndpoints indicates an expected call of CiliumEndpoints.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumEndpoints", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumEndpoints), arg0)
}

// CiliumExternalWorkloads mocks base method.
func (m *MockCiliumV2Interface) CiliumExternalWorkloads() v20.CiliumExternalWorkloadInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumExternalWorkloads")
	ret0, _ := ret[0].(v20.CiliumExternalWorkloadInterface)
	return ret0
}

// CiliumExternalWorkloads indicates an expected call of CiliumExternalWorkloads.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumExternalWorkloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumExternalWorkloads", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumExternalWorkloads))
}

// CiliumIdentities mocks base method.
func (m *MockCiliumV2Interface) CiliumIdentities() v20.CiliumIdentityInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumIdentities")
	ret0, _ := ret[0].(v20.CiliumIdentityInterface)
	return ret0
}

// CiliumIdentities indicates an expected call of CiliumIdentities.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumIdentities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumIdentities", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumIdentities))
}

// CiliumLocalRedirectPolicies mocks base method.
func (m *MockCiliumV2Interface) CiliumLocalRedirectPolicies(arg0 string) v20.CiliumLocalRedirectPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumLocalRedirectPolicies", arg0)
	ret0, _ := ret[0].(v20.CiliumLocalRedirectPolicyInterface)
	return ret0
}

// CiliumLocalRedirectPolicies indicates an expected call of CiliumLocalRedirectPolicies.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumLocalRedirectPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumLocalRedirectPolicies", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumLocalRedirectPolicies), arg0)
}

// CiliumNetworkPolicies mocks base method.
func (m *MockCiliumV2Interface) CiliumNetworkPolicies(arg0 string) v20.CiliumNetworkPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumNetworkPolicies", arg0)
	ret0, _ := ret[0].(v20.CiliumNetworkPolicyInterface)
	return ret0
}

// CiliumNetworkPolicies indicates an expected call of CiliumNetworkPolicies.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumNetworkPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumNetworkPolicies", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumNetworkPolicies), arg0)
}

// CiliumNodes mocks base method.
func (m *MockCiliumV2Interface) CiliumNodes() v20.CiliumNodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CiliumNodes")
	ret0, _ := ret[0].(v20.CiliumNodeInterface)
	return ret0
}

// CiliumNodes indicates an expected call of CiliumNodes.
func (mr *MockCiliumV2InterfaceMockRecorder) CiliumNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CiliumNodes", reflect.TypeOf((*MockCiliumV2Interface)(nil).CiliumNodes))
}

// RESTClient mocks base method.
func (m *MockCiliumV2Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockCiliumV2InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCiliumV2Interface)(nil).RESTClient))
}

// MockCiliumNetworkPolicyInterface is a mock of CiliumNetworkPolicyInterface interface.
type MockCiliumNetworkPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCiliumNetworkPolicyInterfaceMockRecorder
}

// MockCiliumNetworkPolicyInterfaceMockRecorder is the mock recorder for MockCiliumNetworkPolicyInterface.
type MockCiliumNetworkPolicyInterfaceMockRecorder struct {
	mock *MockCiliumNetworkPolicyInterface
}

// NewMockCiliumNetworkPolicyInterface creates a new mock instance.
func NewMockCiliumNetworkPolicyInterface(ctrl *gomock.Controller) *MockCiliumNetworkPolicyInterface {
	mock := &MockCiliumNetworkPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockCiliumNetworkPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiliumNetworkPolicyInterface) EXPECT() *MockCiliumNetworkPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Create(arg0 context.Context, arg1 *v2.CiliumNetworkPolicy, arg2 v1.CreateOptions) (*v2.CiliumNetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockCiliumNetworkPolicyInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions) (*v2.CiliumNetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockCiliumNetworkPolicyInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*v2.CiliumNetworkPolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*v2.CiliumNetworkPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Update(arg0 context.Context, arg1 *v2.CiliumNetworkPolicy, arg2 v1.UpdateOptions) (*v2.CiliumNetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockCiliumNetworkPolicyInterface) UpdateStatus(arg0 context.Context, arg1 *v2.CiliumNetworkPolicy, arg2 v1.UpdateOptions) (*v2.CiliumNetworkPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v2.CiliumNetworkPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).UpdateStatus), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockCiliumNetworkPolicyInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockCiliumNetworkPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCiliumNetworkPolicyInterface)(nil).Watch), arg0, arg1)
}
