// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cilium/cilium/api/v1/observer (interfaces: ObserverClient,Observer_GetFlowsClient)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	observer "github.com/cilium/cilium/api/v1/observer"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockObserverClient is a mock of ObserverClient interface.
type MockObserverClient struct {
	ctrl     *gomock.Controller
	recorder *MockObserverClientMockRecorder
}

// MockObserverClientMockRecorder is the mock recorder for MockObserverClient.
type MockObserverClientMockRecorder struct {
	mock *MockObserverClient
}

// NewMockObserverClient creates a new mock instance.
func NewMockObserverClient(ctrl *gomock.Controller) *MockObserverClient {
	mock := &MockObserverClient{ctrl: ctrl}
	mock.recorder = &MockObserverClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserverClient) EXPECT() *MockObserverClientMockRecorder {
	return m.recorder
}

// GetFlows mocks base method.
func (m *MockObserverClient) GetFlows(arg0 context.Context, arg1 *observer.GetFlowsRequest, arg2 ...grpc.CallOption) (observer.Observer_GetFlowsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlows", varargs...)
	ret0, _ := ret[0].(observer.Observer_GetFlowsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlows indicates an expected call of GetFlows.
func (mr *MockObserverClientMockRecorder) GetFlows(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlows", reflect.TypeOf((*MockObserverClient)(nil).GetFlows), varargs...)
}

// ServerStatus mocks base method.
func (m *MockObserverClient) ServerStatus(arg0 context.Context, arg1 *observer.ServerStatusRequest, arg2 ...grpc.CallOption) (*observer.ServerStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerStatus", varargs...)
	ret0, _ := ret[0].(*observer.ServerStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerStatus indicates an expected call of ServerStatus.
func (mr *MockObserverClientMockRecorder) ServerStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerStatus", reflect.TypeOf((*MockObserverClient)(nil).ServerStatus), varargs...)
}

// MockObserver_GetFlowsClient is a mock of Observer_GetFlowsClient interface.
type MockObserver_GetFlowsClient struct {
	ctrl     *gomock.Controller
	recorder *MockObserver_GetFlowsClientMockRecorder
}

// MockObserver_GetFlowsClientMockRecorder is the mock recorder for MockObserver_GetFlowsClient.
type MockObserver_GetFlowsClientMockRecorder struct {
	mock *MockObserver_GetFlowsClient
}

// NewMockObserver_GetFlowsClient creates a new mock instance.
func NewMockObserver_GetFlowsClient(ctrl *gomock.Controller) *MockObserver_GetFlowsClient {
	mock := &MockObserver_GetFlowsClient{ctrl: ctrl}
	mock.recorder = &MockObserver_GetFlowsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver_GetFlowsClient) EXPECT() *MockObserver_GetFlowsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockObserver_GetFlowsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObserver_GetFlowsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObserver_GetFlowsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObserver_GetFlowsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObserver_GetFlowsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObserver_GetFlowsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockObserver_GetFlowsClient) Recv() (*observer.GetFlowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*observer.GetFlowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObserver_GetFlowsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockObserver_GetFlowsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObserver_GetFlowsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockObserver_GetFlowsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObserver_GetFlowsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockObserver_GetFlowsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObserver_GetFlowsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObserver_GetFlowsClient)(nil).Trailer))
}
